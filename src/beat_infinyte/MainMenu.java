/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package beat_infinyte;

import java.awt.Color;
import javax.swing.BorderFactory;
import DB.Conexion;
import java.awt.datatransfer.FlavorListener;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author hugos
 */
public class MainMenu extends javax.swing.JFrame {

    //ATRIBUTOS
    protected static int id_user;
    String[] Titulos = {"NOMBRE", "DESCARGA", "GENERO"}; //Arreglo de los titulos para la tabla
    DefaultTableModel dtm_datos = new DefaultTableModel(); //creamos  un modelo para la taba de datos
    TableRowSorter<TableModel> trs; //Hacemos el table row sorter para poder ordenar la tabla al presionar los encabezados de la misma
    ResultSet rs;  //el result set es el resultado de la consulta que mandamos por sql
    String[][] M_datos;  //iniciamos una matriz donde pasaremos los datos de sql
    Conexion cc = new Conexion();   //iniciamos un objeto que se encargara de la conexion de datos
    String query;
    boolean flagSongs = false;
    boolean flagTrap = false;
    boolean flagRap = false;
    boolean flagReggaeton = false;
    
    //CONSTRUCTOR
    public MainMenu(int id_user) {
        MainMenu.id_user = id_user;
        initComponents();
        datos_tabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ventana = new javax.swing.JPanel();
        LogoMain = new javax.swing.JLabel();
        navbar = new javax.swing.JPanel();
        Songs = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Trap = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Settings = new javax.swing.JLabel();
        Rap = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        Reggaeton = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        tabla = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ventana.setBackground(new java.awt.Color(52, 52, 52));
        ventana.setPreferredSize(new java.awt.Dimension(1280, 720));

        LogoMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logomenu.png"))); // NOI18N

        navbar.setBackground(new java.awt.Color(111, 111, 111));

        Songs.setBackground(new java.awt.Color(52, 52, 52));
        Songs.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 3, 3, new java.awt.Color(188, 245, 28)));
        Songs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SongsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SongsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SongsMouseExited(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Platinum Sign Over", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("ALL SONGS");

        javax.swing.GroupLayout SongsLayout = new javax.swing.GroupLayout(Songs);
        Songs.setLayout(SongsLayout);
        SongsLayout.setHorizontalGroup(
            SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        SongsLayout.setVerticalGroup(
            SongsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Trap.setBackground(new java.awt.Color(52, 52, 52));
        Trap.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 3, 3, new java.awt.Color(52, 52, 52)));
        Trap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TrapMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TrapMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                TrapMouseExited(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Platinum Sign Over", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TRAP");

        javax.swing.GroupLayout TrapLayout = new javax.swing.GroupLayout(Trap);
        Trap.setLayout(TrapLayout);
        TrapLayout.setHorizontalGroup(
            TrapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        TrapLayout.setVerticalGroup(
            TrapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Settings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/usericon.png"))); // NOI18N
        Settings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SettingsMouseClicked(evt);
            }
        });

        Rap.setBackground(new java.awt.Color(52, 52, 52));
        Rap.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 3, 3, new java.awt.Color(52, 52, 52)));
        Rap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RapMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                RapMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                RapMouseExited(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Platinum Sign Over", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("RAP");

        javax.swing.GroupLayout RapLayout = new javax.swing.GroupLayout(Rap);
        Rap.setLayout(RapLayout);
        RapLayout.setHorizontalGroup(
            RapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        RapLayout.setVerticalGroup(
            RapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        Reggaeton.setBackground(new java.awt.Color(52, 52, 52));
        Reggaeton.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 3, 3, new java.awt.Color(52, 52, 52)));
        Reggaeton.setPreferredSize(new java.awt.Dimension(193, 5));
        Reggaeton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReggaetonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ReggaetonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ReggaetonMouseExited(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Platinum Sign Over", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("REGGAETON");

        javax.swing.GroupLayout ReggaetonLayout = new javax.swing.GroupLayout(Reggaeton);
        Reggaeton.setLayout(ReggaetonLayout);
        ReggaetonLayout.setHorizontalGroup(
            ReggaetonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
        );
        ReggaetonLayout.setVerticalGroup(
            ReggaetonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout navbarLayout = new javax.swing.GroupLayout(navbar);
        navbar.setLayout(navbarLayout);
        navbarLayout.setHorizontalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Songs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Trap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Rap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Reggaeton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142)
                .addComponent(Settings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        navbarLayout.setVerticalGroup(
            navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navbarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Songs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Trap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Reggaeton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                    .addComponent(Rap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navbarLayout.createSequentialGroup()
                .addGap(0, 3, Short.MAX_VALUE)
                .addComponent(Settings))
        );

        jPanel3.setBackground(new java.awt.Color(111, 111, 111));

        jTable1.setBackground(new java.awt.Color(177, 177, 177));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(tabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ventanaLayout = new javax.swing.GroupLayout(ventana);
        ventana.setLayout(ventanaLayout);
        ventanaLayout.setHorizontalGroup(
            ventanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ventanaLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(LogoMain, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(ventanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(navbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        ventanaLayout.setVerticalGroup(
            ventanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ventanaLayout.createSequentialGroup()
                .addGroup(ventanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LogoMain, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ventanaLayout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(navbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ventana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ventana, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Creacion de la tabla de datos 
    private void datos_tabla() {
        
        int contador = 0;  //creamos un contador para saber el numero de datos que obtendremos de la tabla datos de sql
        try { //para las consultas sql siempre vamos a ocupar un try catch por su ocurre un error
            Statement st_cont = Conexion.conexion.createStatement(); //el statement nos ayuda a procesar una sentencia sql 
            ResultSet rs_cont = st_cont.executeQuery("SELECT COUNT(*) AS count FROM Canciones"); // asignamos los datos obtenidos de la consulta al result set
             if (rs_cont.next()) {
                contador = rs_cont.getInt("count");
            }
//lo anterior fue solo para conocer el numero de datos que manejariamos esto mediante logra gracias con count de sql y con el  * le decimos que nos cuenta todas las filas de la tabla

            
            Statement st = Conexion.conexion.createStatement(); //ahora vamos a  hacer lo mismo solo que esta vez no obtendremos el numero de filas en la tabla
            ResultSet rs = st.executeQuery("SELECT `Nombre`, `Descarga`, `Tipo` FROM `Canciones`") ; //aora obtendremos los datos de la tabla para mostrarlos en el jtable
            //ResultSet rs = st.executeQuery(query);
            
            int cont = 0; //el contador nos ayudara para movernos en las filas de la matriz mientras que los numeros fijos (0,1,2,3) nos moveran por las 4 columnas que seran el id, nombre, etc
            M_datos = new String[contador][3]; //definimos el tamaño de la matriz 
            while (cont < contador) {
                while (rs.next()) { //el while nos ayudara a recorrer los datos obtenidos en la consulta anterior y asignarlos a la matriz  
                //agregamos los datos a la table
                M_datos[cont][0] = rs.getString("Nombre");
                M_datos[cont][1] = rs.getString("Descarga");
                M_datos[cont][2] = rs.getString("Tipo");
                cont++; //avanzamos una posicion del contador para que pase a la siguiente fila
                }
            }

        } catch (SQLException ex) {
            System.out.println(ex);
            //Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex); //si llegara a ocurrir un error ya se  una mala consulta o mala conexion aqui nos lo mostraria
        }

        dtm_datos = new DefaultTableModel(M_datos, Titulos) { //ahora agregaremos la matriz y los titulos al modelo de tabla
            public boolean isCellEditable(int row, int column) {//este metodo es muy util si no quieren que editen su tabla, 
                return false;  //si quieren modificar los campos al dar clic entonces borren este metodo
            }
        };
        
        jTable1.setModel(dtm_datos); //ahora el modelo que ya tiene tanto los datos como los titulos lo agregamos a la tabla
        trs = new TableRowSorter<>(dtm_datos); //iniciamos el table row sorter para ordenar los datos (esto es si gustan)
        jTable1.setRowSorter(trs); //y lo agregamos al jtable
    }
    
    private void datos_tablaTrap() {
        
        int contador = 0;  //creamos un contador para saber el numero de datos que obtendremos de la tabla datos de sql
        try { //para las consultas sql siempre vamos a ocupar un try catch por su ocurre un error
            Statement st_cont = Conexion.conexion.createStatement(); //el statement nos ayuda a procesar una sentencia sql 
            ResultSet rs_cont = st_cont.executeQuery("SELECT COUNT(*) AS count FROM Canciones WHERE `Tipo` = 'Trap'"); // asignamos los datos obtenidos de la consulta al result set
             if (rs_cont.next()) {
                contador = rs_cont.getInt("count");
            }
//lo anterior fue solo para conocer el numero de datos que manejariamos esto mediante logra gracias con count de sql y con el  * le decimos que nos cuenta todas las filas de la tabla

            
            Statement st = Conexion.conexion.createStatement(); //ahora vamos a  hacer lo mismo solo que esta vez no obtendremos el numero de filas en la tabla
            ResultSet rs = st.executeQuery("SELECT `Nombre`, `Descarga`, `Tipo` FROM `Canciones` WHERE `Tipo` = 'Trap'") ; //aora obtendremos los datos de la tabla para mostrarlos en el jtable
            //ResultSet rs = st.executeQuery(query);
            
            int cont = 0; //el contador nos ayudara para movernos en las filas de la matriz mientras que los numeros fijos (0,1,2,3) nos moveran por las 4 columnas que seran el id, nombre, etc
            M_datos = new String[contador][3]; //definimos el tamaño de la matriz 
            while (cont < contador) {
                while (rs.next()) { //el while nos ayudara a recorrer los datos obtenidos en la consulta anterior y asignarlos a la matriz  
                //agregamos los datos a la table
                M_datos[cont][0] = rs.getString("Nombre");
                M_datos[cont][1] = rs.getString("Descarga");
                M_datos[cont][2] = rs.getString("Tipo");
                cont++; //avanzamos una posicion del contador para que pase a la siguiente fila
                }
            }

        } catch (SQLException ex) {
            System.out.println(ex);
            //Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex); //si llegara a ocurrir un error ya se  una mala consulta o mala conexion aqui nos lo mostraria
        }

        dtm_datos = new DefaultTableModel(M_datos, Titulos) { //ahora agregaremos la matriz y los titulos al modelo de tabla
            public boolean isCellEditable(int row, int column) {//este metodo es muy util si no quieren que editen su tabla, 
                return false;  //si quieren modificar los campos al dar clic entonces borren este metodo
            }
        };
        
        jTable1.setModel(dtm_datos); //ahora el modelo que ya tiene tanto los datos como los titulos lo agregamos a la tabla
        trs = new TableRowSorter<>(dtm_datos); //iniciamos el table row sorter para ordenar los datos (esto es si gustan)
        jTable1.setRowSorter(trs); //y lo agregamos al jtable
    }
    
    private void datos_tablaRap() {
        
        int contador = 0;  //creamos un contador para saber el numero de datos que obtendremos de la tabla datos de sql
        try { //para las consultas sql siempre vamos a ocupar un try catch por su ocurre un error
            Statement st_cont = Conexion.conexion.createStatement(); //el statement nos ayuda a procesar una sentencia sql 
            ResultSet rs_cont = st_cont.executeQuery("SELECT COUNT(*) AS count FROM Canciones WHERE `Tipo` = 'Rap'"); // asignamos los datos obtenidos de la consulta al result set
             if (rs_cont.next()) {
                contador = rs_cont.getInt("count");
            }
//lo anterior fue solo para conocer el numero de datos que manejariamos esto mediante logra gracias con count de sql y con el  * le decimos que nos cuenta todas las filas de la tabla

            
            Statement st = Conexion.conexion.createStatement(); //ahora vamos a  hacer lo mismo solo que esta vez no obtendremos el numero de filas en la tabla
            ResultSet rs = st.executeQuery("SELECT `Nombre`, `Descarga`, `Tipo` FROM `Canciones` WHERE `Tipo` = 'Rap'") ; //aora obtendremos los datos de la tabla para mostrarlos en el jtable
            //ResultSet rs = st.executeQuery(query);
            
            int cont = 0; //el contador nos ayudara para movernos en las filas de la matriz mientras que los numeros fijos (0,1,2,3) nos moveran por las 4 columnas que seran el id, nombre, etc
            M_datos = new String[contador][3]; //definimos el tamaño de la matriz 
            while (cont < contador) {
                while (rs.next()) { //el while nos ayudara a recorrer los datos obtenidos en la consulta anterior y asignarlos a la matriz  
                //agregamos los datos a la table
                M_datos[cont][0] = rs.getString("Nombre");
                M_datos[cont][1] = rs.getString("Descarga");
                M_datos[cont][2] = rs.getString("Tipo");
                cont++; //avanzamos una posicion del contador para que pase a la siguiente fila
                }
            }

        } catch (SQLException ex) {
            System.out.println(ex);
            //Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex); //si llegara a ocurrir un error ya se  una mala consulta o mala conexion aqui nos lo mostraria
        }

        dtm_datos = new DefaultTableModel(M_datos, Titulos) { //ahora agregaremos la matriz y los titulos al modelo de tabla
            public boolean isCellEditable(int row, int column) {//este metodo es muy util si no quieren que editen su tabla, 
                return false;  //si quieren modificar los campos al dar clic entonces borren este metodo
            }
        };
        
        jTable1.setModel(dtm_datos); //ahora el modelo que ya tiene tanto los datos como los titulos lo agregamos a la tabla
        trs = new TableRowSorter<>(dtm_datos); //iniciamos el table row sorter para ordenar los datos (esto es si gustan)
        jTable1.setRowSorter(trs); //y lo agregamos al jtable
    }
    
    private void datos_tablaReggaeton() {
        
        int contador = 0;  //creamos un contador para saber el numero de datos que obtendremos de la tabla datos de sql
        try { //para las consultas sql siempre vamos a ocupar un try catch por su ocurre un error
            Statement st_cont = Conexion.conexion.createStatement(); //el statement nos ayuda a procesar una sentencia sql 
            ResultSet rs_cont = st_cont.executeQuery("SELECT COUNT(*) AS count FROM Canciones WHERE `Tipo` = 'Reggaeton'"); // asignamos los datos obtenidos de la consulta al result set
             if (rs_cont.next()) {
                contador = rs_cont.getInt("count");
            }
//lo anterior fue solo para conocer el numero de datos que manejariamos esto mediante logra gracias con count de sql y con el  * le decimos que nos cuenta todas las filas de la tabla

            
            Statement st = Conexion.conexion.createStatement(); //ahora vamos a  hacer lo mismo solo que esta vez no obtendremos el numero de filas en la tabla
            ResultSet rs = st.executeQuery("SELECT `Nombre`, `Descarga`, `Tipo` FROM `Canciones` WHERE `Tipo` = 'Reggaeton'") ; //aora obtendremos los datos de la tabla para mostrarlos en el jtable
            //ResultSet rs = st.executeQuery(query);
            
            int cont = 0; //el contador nos ayudara para movernos en las filas de la matriz mientras que los numeros fijos (0,1,2,3) nos moveran por las 4 columnas que seran el id, nombre, etc
            M_datos = new String[contador][3]; //definimos el tamaño de la matriz 
            while (cont < contador) {
                while (rs.next()) { //el while nos ayudara a recorrer los datos obtenidos en la consulta anterior y asignarlos a la matriz  
                //agregamos los datos a la table
                M_datos[cont][0] = rs.getString("Nombre");
                M_datos[cont][1] = rs.getString("Descarga");
                M_datos[cont][2] = rs.getString("Tipo");
                cont++; //avanzamos una posicion del contador para que pase a la siguiente fila
                }
            }

        } catch (SQLException ex) {
            System.out.println(ex);
            //Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex); //si llegara a ocurrir un error ya se  una mala consulta o mala conexion aqui nos lo mostraria
        }

        dtm_datos = new DefaultTableModel(M_datos, Titulos) { //ahora agregaremos la matriz y los titulos al modelo de tabla
            public boolean isCellEditable(int row, int column) {//este metodo es muy util si no quieren que editen su tabla, 
                return false;  //si quieren modificar los campos al dar clic entonces borren este metodo
            }
        };
        
        jTable1.setModel(dtm_datos); //ahora el modelo que ya tiene tanto los datos como los titulos lo agregamos a la tabla
        trs = new TableRowSorter<>(dtm_datos); //iniciamos el table row sorter para ordenar los datos (esto es si gustan)
        jTable1.setRowSorter(trs); //y lo agregamos al jtable
    }
    
    private void SettingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SettingsMouseClicked
        UserMenu user = new UserMenu();
        user.setVisible(true);
    }//GEN-LAST:event_SettingsMouseClicked
    
    private void SongsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SongsMouseEntered
        Songs.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
    }//GEN-LAST:event_SongsMouseEntered

    private void SongsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SongsMouseExited
        if (flagSongs) {
            Songs.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        }
        if (!flagSongs){
            Songs.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        }   
    }//GEN-LAST:event_SongsMouseExited

    private void SongsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SongsMouseClicked
        datos_tabla();
        flagSongs = true;
        flagRap = false;
        flagTrap = false;
        flagReggaeton = false;
        Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
    }//GEN-LAST:event_SongsMouseClicked

    private void TrapMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TrapMouseEntered
        Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        
    }//GEN-LAST:event_TrapMouseEntered

    private void TrapMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TrapMouseExited
        if (flagTrap) {
            Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        }
        if (!flagTrap){
            Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        }
    }//GEN-LAST:event_TrapMouseExited

    private void TrapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TrapMouseClicked
        datos_tablaTrap();
        flagTrap = true;
        flagRap = false;
        flagReggaeton = false;
        flagSongs = false;
        
        Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        Songs.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        Rap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        Reggaeton.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
    }//GEN-LAST:event_TrapMouseClicked

    private void RapMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RapMouseEntered
        Rap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
    }//GEN-LAST:event_RapMouseEntered

    private void RapMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RapMouseExited
        if (flagRap) {
            Rap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        }
        if (!flagRap){
            Rap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        }
    }//GEN-LAST:event_RapMouseExited

    private void RapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RapMouseClicked
        datos_tablaRap();
        flagRap = true;
        flagTrap = false;
        flagReggaeton = false;
        flagSongs = false;
        
        Rap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        Songs.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        Reggaeton.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
    }//GEN-LAST:event_RapMouseClicked

    private void ReggaetonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReggaetonMouseEntered
        Reggaeton.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
    }//GEN-LAST:event_ReggaetonMouseEntered

    private void ReggaetonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReggaetonMouseExited
        if (flagReggaeton) {
            Reggaeton.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        }
        if (!flagReggaeton){
            Reggaeton.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        }
    }//GEN-LAST:event_ReggaetonMouseExited

    private void ReggaetonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReggaetonMouseClicked
        datos_tablaReggaeton();
        flagRap = false;
        flagTrap = false;
        flagReggaeton = true;
        flagSongs = false;
        
        Reggaeton.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(188,245,28)));
        Songs.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        Trap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
        Rap.setBorder(BorderFactory.createMatteBorder(2, 2, 3, 3, new Color(52,52,52)));
    }//GEN-LAST:event_ReggaetonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu(MainMenu.id_user).setVisible(true);
            }
        });
    }
    
    //Metodo para añadir canciones a la cuenta del usuario
    public static void añadirCancion(int id_user, int id_reggaeton, int id_rap, int id_trap) {
		String query = "INSERT INTO CancionesUsuario (id_user, id_reggaeton, id_rap, id_trap) VALUES (?, ?, ?, ?)";

		try {
			PreparedStatement st = Conexion.conexion.prepareStatement(query);
                        
			st.setInt(1, id_user);
			st.setInt(2, id_reggaeton);
                        st.setInt(2, id_rap);
                        st.setInt(2, id_trap);

			st.executeUpdate();
		} catch (SQLException e) {
			System.out.println("ERROR AL AÑADIR UNA CANCIÓN: " + e);
		}
	}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LogoMain;
    private javax.swing.JPanel Rap;
    private javax.swing.JPanel Reggaeton;
    private javax.swing.JLabel Settings;
    private javax.swing.JPanel Songs;
    private javax.swing.JPanel Trap;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel navbar;
    private javax.swing.JScrollPane tabla;
    private javax.swing.JPanel ventana;
    // End of variables declaration//GEN-END:variables
}
